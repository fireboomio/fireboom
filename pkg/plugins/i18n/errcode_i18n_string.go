// Code generated by "i18n-stringer -type Errcode -tomlpath errcode -defaultlocale zh_cn"; DO NOT EDIT.

package i18n

import (
	"context"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the i18n-stringer command to generate them again.
	var x [1]struct{}
	_ = x[ServerError-10101]
	_ = x[ParamIllegalError-10201]
	_ = x[ParamBindError-10202]
	_ = x[StructParamEmtpyError-10203]
	_ = x[BodyParamEmptyError-10204]
	_ = x[PathParamEmptyError-10205]
	_ = x[QueryParamEmptyError-10206]
	_ = x[FormParamEmptyError-10207]
	_ = x[RequestResubmitError-10301]
	_ = x[RequestSignatureError-10302]
	_ = x[RequestReadBodyError-10303]
	_ = x[RequestEmptyBodyError-10304]
	_ = x[RequestProxyError-10305]
	_ = x[FileReadError-10401]
	_ = x[FileWriteError-10402]
	_ = x[FileZipError-10403]
	_ = x[FileUnZipError-10404]
	_ = x[FileZipAmountZeroError-10405]
	_ = x[FileContentEmptyError-10406]
	_ = x[DirectoryReadError-10407]
	_ = x[LoaderFileReadError-10501]
	_ = x[LoaderFileNotExistError-10502]
	_ = x[LoaderFileUnmarshalError-10503]
	_ = x[LoaderDataExistEditorError-10504]
	_ = x[LoaderDataExistError-10505]
	_ = x[LoaderDataNotExistError-10506]
	_ = x[LoaderLockNotFoundError-10507]
	_ = x[LoaderWatcherNotSupport-10508]
	_ = x[LoaderNoneModifiedError-10509]
	_ = x[LoaderRWNotSupportError-10510]
	_ = x[LoaderNameEmptyError-10511]
	_ = x[LoaderBasenameEmptyErr-10512]
	_ = x[LoaderRootOrExtensionEmptyErr-10513]
	_ = x[LoaderMultipleOnlyError-10514]
	_ = x[LoaderEmbedNotAllowModifyErr-10515]
	_ = x[LoaderRemoveKeyNotFoundError-10516]
	_ = x[LoaderRenameKeyNotFoundError-10517]
	_ = x[LoaderRenameTargetExistError-10518]
	_ = x[LoaderRenameNotAllowMultipleError-10519]
	_ = x[LoaderWriteableRelyModelRequiredError-10520]
	_ = x[LoaderDataFilepathError-10521]
	_ = x[VscodeOnlyDirectoriesCanWatchError-10601]
	_ = x[VscodeDirectoryExistError-10602]
	_ = x[VscodeFileExistError-10603]
	_ = x[VscodeFileNotExistError-10604]
	_ = x[VscodeSourceNotDirectoryError-10605]
	_ = x[VscodeTargetDirectoryExistError-10606]
	_ = x[EngineCreateConfigError-20101]
	_ = x[EngineRestartError-10102]
	_ = x[DataInsertError-20201]
	_ = x[DataDeleteError-20202]
	_ = x[DataUpdateError-20203]
	_ = x[DataSelectError-20204]
	_ = x[DataCopyError-20205]
	_ = x[DataRenameError-20206]
	_ = x[DataBatchInsertError-20207]
	_ = x[DataBatchDeleteError-20208]
	_ = x[DataBatchUpdateError-20209]
	_ = x[DataEmptyListError-20210]
	_ = x[DataNotExistsError-20211]
	_ = x[DatasourceConnectionError-20301]
	_ = x[DatasourceKindNotSupportedError-20302]
	_ = x[DatasourceDisabledError-20303]
	_ = x[DatasourceDatabaseUrlEmptyError-20304]
	_ = x[DatabaseOasVersionError-20305]
	_ = x[PrismaQueryError-20306]
	_ = x[PrismaMigrateError-20307]
	_ = x[StoragePingError-20401]
	_ = x[StorageDisabledError-20402]
	_ = x[StorageMkdirError-20403]
	_ = x[StorageTouchError-20404]
	_ = x[StorageRemoveError-20405]
	_ = x[StorageRenameError-20406]
	_ = x[StorageListError-20407]
	_ = x[StorageDetailError-20408]
	_ = x[StorageDownloadError-20409]
	_ = x[OperationRoleHasBindError-20501]
	_ = x[OperationRbacTypeError-20502]
	_ = x[SettingServerUrlEmptyError-20601]
	_ = x[SdkAlreadyUpToDateError-20701]
}

const (
	_Errcode_ZhCn_name = "服务器内部错误引擎重启错误参数非法参数解析错误结构体参数[%s]为空Body参数[%s]为空Path参数[%s]为空Query参数[%s]为空Form参数[%s]为空请勿重复提交参数签名有误请求数据读取错误请求数据为空请求代理错误文件[%s]读取错误文件[%s]写入错误文件压缩错误文件解压错误文件压缩数量为0文件[%s]内容为空目录[%s]读取错误文件[%s]读取失败文件[%s]不存在反序列化文件[%s]失败[%s]正在编辑数据数据[%s]已存在数据[%s]不存在数据锁[%s]未找到watcher[%s]不支持数据[%s]未变更数据操作[%s]不支持数据名称为空basename函数未设置root或extension为空仅允许[MultipleRW]调用内置[EmbedRW]禁止修改未发现删除的KEYS未发现重命名的KEY重命名目标[%s]已存在禁止重命名多个KEY文件写入依赖relyModel文件路径不匹配，预期[%s]，实际[%s]仅目录可被监听目录[%s]已存在文件[%s]已存在文件[%s]不存在来源[%s]不是目录目标目录[%s]已存在创建引擎启动配置错误数据新增错误数据删除错误数据修改错误数据查询错误数据拷贝错误数据重命名错误数据批量新增错误数据批量删除错误数据批量更新错误数据列表为空数据不存在数据源连接错误数据源类型[%d]不支持数据源未开启数据源连接参数为空OAS版本[%s]不支持Prisma Query引擎错误Prisma Migrate引擎错误OSS存储连接异常OSS存储未开启OSS存储创建目录错误OSS存储创建文件错误OSS存储删除错误OSS存储重命名错误OSS存储查询列表错误OSS存储查询详情错误OSS存储下载文件错误rbac[%s]已绑定角色[%s]rbacType[%s]不支持钩子服务地址未配置SDK[%s]已是最新版本"
)

var (
	_Errcode_ZhCn_map = map[Errcode]string{
		10101: _Errcode_ZhCn_name[0:21],
		10102: _Errcode_ZhCn_name[21:39],
		10201: _Errcode_ZhCn_name[39:51],
		10202: _Errcode_ZhCn_name[51:69],
		10203: _Errcode_ZhCn_name[69:94],
		10204: _Errcode_ZhCn_name[94:114],
		10205: _Errcode_ZhCn_name[114:134],
		10206: _Errcode_ZhCn_name[134:155],
		10207: _Errcode_ZhCn_name[155:175],
		10301: _Errcode_ZhCn_name[175:193],
		10302: _Errcode_ZhCn_name[193:211],
		10303: _Errcode_ZhCn_name[211:235],
		10304: _Errcode_ZhCn_name[235:253],
		10305: _Errcode_ZhCn_name[253:271],
		10401: _Errcode_ZhCn_name[271:293],
		10402: _Errcode_ZhCn_name[293:315],
		10403: _Errcode_ZhCn_name[315:333],
		10404: _Errcode_ZhCn_name[333:351],
		10405: _Errcode_ZhCn_name[351:373],
		10406: _Errcode_ZhCn_name[373:395],
		10407: _Errcode_ZhCn_name[395:417],
		10501: _Errcode_ZhCn_name[417:439],
		10502: _Errcode_ZhCn_name[439:458],
		10503: _Errcode_ZhCn_name[458:486],
		10504: _Errcode_ZhCn_name[486:508],
		10505: _Errcode_ZhCn_name[508:527],
		10506: _Errcode_ZhCn_name[527:546],
		10507: _Errcode_ZhCn_name[546:568],
		10508: _Errcode_ZhCn_name[568:588],
		10509: _Errcode_ZhCn_name[588:607],
		10510: _Errcode_ZhCn_name[607:632],
		10511: _Errcode_ZhCn_name[632:650],
		10512: _Errcode_ZhCn_name[650:673],
		10513: _Errcode_ZhCn_name[673:695],
		10514: _Errcode_ZhCn_name[695:722],
		10515: _Errcode_ZhCn_name[722:749],
		10516: _Errcode_ZhCn_name[749:771],
		10517: _Errcode_ZhCn_name[771:795],
		10518: _Errcode_ZhCn_name[795:823],
		10519: _Errcode_ZhCn_name[823:847],
		10520: _Errcode_ZhCn_name[847:874],
		10521: _Errcode_ZhCn_name[874:921],
		10601: _Errcode_ZhCn_name[921:942],
		10602: _Errcode_ZhCn_name[942:961],
		10603: _Errcode_ZhCn_name[961:980],
		10604: _Errcode_ZhCn_name[980:999],
		10605: _Errcode_ZhCn_name[999:1021],
		10606: _Errcode_ZhCn_name[1021:1046],
		20101: _Errcode_ZhCn_name[1046:1076],
		20201: _Errcode_ZhCn_name[1076:1094],
		20202: _Errcode_ZhCn_name[1094:1112],
		20203: _Errcode_ZhCn_name[1112:1130],
		20204: _Errcode_ZhCn_name[1130:1148],
		20205: _Errcode_ZhCn_name[1148:1166],
		20206: _Errcode_ZhCn_name[1166:1187],
		20207: _Errcode_ZhCn_name[1187:1211],
		20208: _Errcode_ZhCn_name[1211:1235],
		20209: _Errcode_ZhCn_name[1235:1259],
		20210: _Errcode_ZhCn_name[1259:1277],
		20211: _Errcode_ZhCn_name[1277:1292],
		20301: _Errcode_ZhCn_name[1292:1313],
		20302: _Errcode_ZhCn_name[1313:1341],
		20303: _Errcode_ZhCn_name[1341:1359],
		20304: _Errcode_ZhCn_name[1359:1386],
		20305: _Errcode_ZhCn_name[1386:1408],
		20306: _Errcode_ZhCn_name[1408:1432],
		20307: _Errcode_ZhCn_name[1432:1458],
		20401: _Errcode_ZhCn_name[1458:1479],
		20402: _Errcode_ZhCn_name[1479:1497],
		20403: _Errcode_ZhCn_name[1497:1524],
		20404: _Errcode_ZhCn_name[1524:1551],
		20405: _Errcode_ZhCn_name[1551:1572],
		20406: _Errcode_ZhCn_name[1572:1596],
		20407: _Errcode_ZhCn_name[1596:1623],
		20408: _Errcode_ZhCn_name[1623:1650],
		20409: _Errcode_ZhCn_name[1650:1677],
		20501: _Errcode_ZhCn_name[1677:1704],
		20502: _Errcode_ZhCn_name[1704:1725],
		20601: _Errcode_ZhCn_name[1725:1752],
		20701: _Errcode_ZhCn_name[1752:1777],
	}
)

// _transOne translate one CONST
func (i Errcode) _transOne(locale string) string {
	switch locale {
	case "zh_cn":
		if str, ok := _Errcode_ZhCn_map[i]; ok {
			return str
		}
		return "Errcode[" + locale + "](" + strconv.FormatInt(int64(i), 10) + ")"
	default:
		// Normally unreachable, should not happen but be cautious
		return ""
	}
}

// _Errcode_supported All supported locales record
var _Errcode_supported = map[string]int{"zh_cn": 0}

// _Errcode_defaultLocale default locale
// generated pass by i18n-stringer flag -defaultlocale, Don't assign directly
var _Errcode_defaultLocale = "zh_cn"

// _Errcode_ctxKey Key from context.Context Value get locale
// generated pass by i18n-stringer flag -ctxkey, Don't assign directly
var _Errcode_ctxKey = "i18nLocale"

// WARNING: You should use Trans, Lang, Wrap, WrapWithContext method instead
//   - You should not use this method in an internationalized language environment, as well as method Error.
//   - Because this method always returns the translation value of the default language.
//   - This method implements the fmt.Stringer interface, so that you can output it directly by package fmt,
//   - If you understand the above mechanism then you can use this method with confidence
func (i Errcode) String() string {
	return i._trans(_Errcode_defaultLocale)
}

// WARNING: You should use Trans, Lang, Wrap, WrapWithContext method instead
//   - You should not use this method in an internationalized language environment, as well as method String.
//   - Because this method always returns the translation value of the default language.
//   - This method implements the error interface, so that you can return the value as an error,
//   - If you understand the above mechanism then you can use this method with confidence
func (i Errcode) Error() string {
	return i._trans(_Errcode_defaultLocale)
}

// Code get original type uint16 value
func (i Errcode) Code() uint16 {
	return uint16(i)
}

// Wrap another error with locale set for i18n TYPE Const
//   - err another error
//   - locale i18n locale name
//   - args optional formatting component
func (i Errcode) Wrap(err error, locale string, args ...interface{}) *I18nErrcodeErrorWrap {
	return &I18nErrcodeErrorWrap{err: err, origin: i, locale: locale, args: args}
}

// WrapWithContext wrap another error with context.Context set for i18n TYPE Const
//   - ctx context with Value use Key from _Errcode_ctxKey, which pass by i18n-stringer flag -ctxkey
//   - err another error
//   - args optional formatting component
func (i Errcode) WrapWithContext(ctx context.Context, err error, args ...interface{}) *I18nErrcodeErrorWrap {
	return &I18nErrcodeErrorWrap{err: err, origin: i, locale: _Errcode_localeFromCtxWithFallback(ctx), args: args}
}

// I18nErrcodeErrorWrap type i18n error wrapper
//
//	WARNING
//	This struct ONLY used to wrap the CONST generated by the i18n-stringer tool,
//	Pass easily obtain internationalized translations through Error, String, Translate
//	WARNING
type I18nErrcodeErrorWrap struct {
	err    error         // wrap another error
	origin Errcode       // custom shaping type Val
	locale string        // i18n locale set
	args   []interface{} // formatted output replacement component
}

// Translate get translated string
func (e *I18nErrcodeErrorWrap) Translate() string {
	return e.origin.Trans(e.locale, e.args...)
}

// String implement fmt.Stringer, get translated string use Translate
func (e *I18nErrcodeErrorWrap) String() string {
	return e.Translate()
}

// Error struct as error, get typed message wrap with inside error message
//   - this method will be formatted wrap error if exist.
//   - Only for development and debugging, or logging full error message
//   - if you want to get typed message, please use method String or Translate
func (e *I18nErrcodeErrorWrap) Error() string {
	if e.err == nil {
		return e.Translate()
	}
	return fmt.Sprintf("%s (%s)", e.Translate(), e.err.Error())
}

// Format alias for method Error
//   - this method will be formatted wrap error if exist.
//   - Only for development and debugging, or logging full error message
//   - if you want to get typed message, please use method String or Translate
func (e *I18nErrcodeErrorWrap) Format() string {
	return e.Error()
}

// Value get original type value
func (e *I18nErrcodeErrorWrap) Value() Errcode {
	return e.origin
}

// Unwrap an error. Get the error inside
func (e *I18nErrcodeErrorWrap) Unwrap() error {
	return e.err
}

// IsLocaleSupport Check if the specified locale is supported
func (i Errcode) IsLocaleSupport(locale string) bool {
	return _Errcode_isLocaleSupport(locale)
}

// Lang get target translate text use context.Context
//   - ctx  context with Value use Key from _Errcode_ctxKey, which pass by i18n-stringer flag -ctxkey
//   - args Optional placeholder replacement value, value type of Errcode, or type of string
func (i Errcode) Lang(ctx context.Context, args ...interface{}) string {
	return i._trans(_Errcode_localeFromCtxWithFallback(ctx), args...)
}

// Trans get target translate text use specified language locale identifier
//   - locale specified language locale identifier, need pass by IsLocaleSupport
//   - args Optional placeholder replacement value, value type of Errcode, or type of string
func (i Errcode) Trans(locale string, args ...interface{}) string {
	if !_Errcode_isLocaleSupport(locale) {
		locale = _Errcode_defaultLocale
	}
	return i._trans(locale, args...)
}

func _Errcode_isLocaleSupport(locale string) bool {
	_, ok := _Errcode_supported[locale]
	return ok
}

// _Errcode_localeFromCtxWithFallback retrieves and returns language locale name from context.
// It returns default locale when _Errcode_isLocaleSupport is false
func _Errcode_localeFromCtxWithFallback(ctx context.Context) string {
	if ctx == nil {
		return _Errcode_defaultLocale
	}
	v := ctx.Value(_Errcode_ctxKey)
	if v == nil {
		return _Errcode_defaultLocale
	}
	if vv, ok := v.(string); ok && _Errcode_isLocaleSupport(vv) {
		return vv
	}
	return _Errcode_defaultLocale
}

// _trans trustworthy parameters inside method
//   - locale i18n local
//   - args   value type of Errcode, or type of string
func (i Errcode) _trans(locale string, args ...interface{}) string {
	msg := i._transOne(locale)
	if len(args) > 0 {
		var com []interface{}
		for _, arg := range args {
			if typ, ok := arg.(Errcode); ok {
				com = append(com, typ._transOne(locale))
			} else {
				com = append(com, arg) // arg as string scalar
			}
		}
		return fmt.Sprintf(msg, com...)
	}
	return msg
}
