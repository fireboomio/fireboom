package asyncapi

import (
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-openapi/jsonpointer"
	json "github.com/json-iterator/go"
)

type (
	SecuritySchemes   map[string]*SecuritySchemeRef
	SecuritySchemeRef struct {
		Ref   string
		Value *SecurityScheme
	}
	SecurityScheme struct {
		// REQUIRED. The type of the security scheme. Valid values are "userPassword", "apiKey", "X509", "symmetricEncryption", "asymmetricEncryption", "httpApiKey", "http", "oauth2", "openIdConnect", "plain", "scramSha256", "scramSha512", and "gssapi".
		Type string `json:"type" yaml:"type"`
		// A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
		Description string `json:"description" yaml:"description"`
		// REQUIRED. The name of the header, query or cookie parameter to be used.
		Name string `json:"name" yaml:"name"`
		// REQUIRED. The location of the API key. Valid values are "user" and "password" for apiKey and "query", "header" or "cookie" for httpApiKey.
		In string `json:"in" yaml:"in"`
		// REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
		Scheme string `json:"scheme" yaml:"scheme"`
		// A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
		BearerFormat string `json:"bearerFormat" yaml:"bearerFormat"`
		// REQUIRED. An object containing configuration information for the flow types supported.
		Flows *OAuthFlows `json:"flows" yaml:"flows"`
		// REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of an absolute URL.
		OpenIdConnectUrl string `json:"openIdConnectUrl" yaml:"openIdConnectUrl"`
		// List of the needed scope names. An empty array means no scopes are needed.
		Scopes []string `json:"scopes" yaml:"scopes"`
	}
)

// MarshalYAML returns the YAML encoding of SecuritySchemeRef.
func (x SecuritySchemeRef) MarshalYAML() (interface{}, error) {
	if ref := x.Ref; ref != "" {
		return &openapi3.Ref{Ref: ref}, nil
	}
	return x.Value, nil
}

// MarshalJSON returns the JSON encoding of SecuritySchemeRef.
func (x SecuritySchemeRef) MarshalJSON() ([]byte, error) {
	if ref := x.Ref; ref != "" {
		return json.Marshal(openapi3.Ref{Ref: ref})
	}
	return json.Marshal(x.Value)
}

// UnmarshalJSON sets SecuritySchemeRef to a copy of data.
func (x *SecuritySchemeRef) UnmarshalJSON(data []byte) error {
	var refOnly openapi3.Ref
	if err := json.Unmarshal(data, &refOnly); err == nil && refOnly.Ref != "" {
		x.Ref = refOnly.Ref
		return nil
	}
	return json.Unmarshal(data, &x.Value)
}

// JSONLookup implements https://pkg.go.dev/github.com/go-openapi/jsonpointer#JSONPointable
func (x *SecuritySchemeRef) JSONLookup(token string) (interface{}, error) {
	if token == "$ref" {
		return x.Ref, nil
	}
	ptr, _, err := jsonpointer.GetForToken(x.Value, token)
	return ptr, err
}

type (
	OAuthFlows struct {
		// Configuration for the OAuth Implicit flow.
		Implicit *OAuthFlow
		// Configuration for the OAuth Resource Owner Protected Credentials flow.
		Password *OAuthFlow
		// Configuration for the OAuth Client Credentials flow.
		ClientCredentials *OAuthFlow
		// Configuration for the OAuth Authorization Code flow.
		AuthorizationCode *OAuthFlow
	}
	OAuthFlow struct {
		// REQUIRED. The authorization URL to be used for this flow. This MUST be in the form of an absolute URL.
		AuthorizationURL string
		// REQUIRED. The token URL to be used for this flow. This MUST be in the form of an absolute URL.
		TokenURL string
		// The URL to be used for obtaining refresh tokens. This MUST be in the form of an absolute URL.
		RefreshURL string
		// REQUIRED. The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it.
		AvailableScopes map[string]string
	}
)
